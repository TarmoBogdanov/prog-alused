"""Simple Poker implementation."""


class Card:
    """
    Represent a playing card.

    Attributes:
    - value (str): The value of the card (e.g., "2", "3", ..., "K", "A").
    - suit (str): The suit of the card (e.g., "hearts", "diamonds", "clubs", "spades").
    """

    def __init__(self, value: str, suit: str):
        """Initialize a Card instance."""
        self.value = value
        self.suit = suit

    def __repr__(self):
        """Return a string representation of the card."""
        return f"{self.value} of {self.suit}"


class Hand:
    """
    Represent a hand of playing cards.

    Attributes:
    - cards (list): List to store the cards in the hand.
    - valid_values (list): List of valid card values.
    - valid_suits (list): List of valid card suits.
    """

    def __init__(self):
        """Initialize a Hand instance."""
        self.cards = []
        self.valid_values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
        self.valid_suits = ["hearts", "diamonds", "clubs", "spades"]

    def can_add_card(self, card: Card):
        """
        Check if a card can be added to the hand.

        Args:
        - card (Card): The card to be checked.

        Returns:
        - bool: True if the card can be added, False otherwise.
        """
        if len(self.cards) >= 5:
            return False
        for existing_card in self.cards:
            if existing_card.value == card.value and existing_card.suit == card.suit:
                return False
        return card.value in self.valid_values and card.suit in self.valid_suits

    def add_card(self, card: Card):
        """
        Add a card to the hand if it is valid.

        Args:
        - card (Card): The card to be added.
        """
        if self.can_add_card(card):
            self.cards.append(card)

    def can_remove_card(self, card: Card):
        """
        Check if a card can be removed from the hand.

        Args:
        - card (Card): The card to be checked.

        Returns:
        - bool: True if the card can be removed, False otherwise.
        """
        return card in self.cards

    def remove_card(self, card: Card):
        """
        Remove a card from the hand if it is valid.

        Args:
        - card (Card): The card to be removed.
        """
        if self.can_remove_card(card):
            self.cards.remove(card)

    def get_cards(self):
        """
        Get all cards in the hand.

        Returns:
        - list: List of cards in the hand.
        """
        return self.cards

    def is_straight(self):
        """
        Check if the hand has a straight.

        Returns:
        - bool: True if the hand has a straight, False otherwise.
        """
        sorted_cards = sorted(self.cards, key=lambda x: self.valid_values.index(x.value))
        for i in range(len(sorted_cards) - 4):
            straight_subset = sorted_cards[i:i + 5]
            if all(straight_subset[j].value == self.valid_values[self.valid_values.index(straight_subset[0].value) + j]
                   for j in range(5)):
                return True
        return False

    def is_flush(self):
        """
        Check if the hand has a flush.

        Returns:
        - bool: True if the hand has a flush, False otherwise.
        """
        return all(card.suit == self.cards[0].suit for card in self.cards)

    def is_straight_flush(self):
        """
        Check if the hand has a straight flush.

        Returns:
        - bool: True if the hand has a straight flush, False otherwise.
        """
        return self.is_straight() and self.is_flush()

    def is_full_house(self):
        """
        Check if the hand has a full house.

        Returns:
        - bool: True if the hand has a full house, False otherwise.
        """
        return self.is_three_of_a_kind() and self.is_pair()

    def is_four_of_a_kind(self):
        """
        Check if the hand has four of a kind.

        Returns:
        - bool: True if the hand has four of a kind, False otherwise.
        """
        for value in self.valid_values:
            if sum(card.value == value for card in self.cards) == 4:
                return True
        return False

    def is_three_of_a_kind(self):
        """
        Check if the hand has three of a kind.

        Returns:
        - bool: True if the hand has three of a kind, False otherwise.
        """
        for value in self.valid_values:
            if sum(card.value == value for card in self.cards) == 3:
                return True
        return False

    def is_pair(self):
        """
        Check if the hand has a pair.

        Returns:
        - bool: True if the hand has a pair, False otherwise.
        """
        for value in self.valid_values:
            if sum(card.value == value for card in self.cards) == 2:
                return True
        return False

    def get_hand_type(self):
        """
        Get the type of hand.

        Returns:
        - str: Type of hand as a string.
        """
        if len(self.cards) < 5:
            return None

        if self.is_straight_flush():
            return "straight flush"
        elif self.is_flush():
            return "flush"
        elif self.is_straight():
            return "straight"
        elif self.is_full_house():
            return "full house"
        elif self.is_four_of_a_kind():
            return "four of a kind"
        elif self.is_three_of_a_kind():
            return "three of a kind"
        elif self.is_pair():
            return "pair"
        else:
            return "high card"

    def __repr__(self):
        """
        Return the string representation of the hand.

        Returns:
        - str: String representation of the hand.
        """
        hand_type = self.get_hand_type()
        if hand_type:
            return f"I got a {hand_type} with cards: {self.cards}"
        else:
            return f"I'm holding {self.cards}"


if __name__ == "__main__":
    # Test cases
    hand = Hand()
    cards = [Card("2", "diamonds"), Card("4", "spades"), Card("5", "clubs"), Card("3", "diamonds"), Card("6", "hearts")]
    [hand.add_card(card) for card in cards]
    print(hand.get_hand_type())  # Should print "straight"

    hand = Hand()
    cards = [Card("10", "diamonds"), Card("2", "diamonds"), Card("A", "diamonds"), Card("6", "diamonds"),
             Card("9", "diamonds")]
    [hand.add_card(card) for card in cards]
    print(hand.get_hand_type())  # Should print "flush"

    hand = Hand()
    cards = [Card("A", "hearts"), Card("A", "clubs"), Card("A", "spades"), Card("A", "diamonds"),
             Card("9", "diamonds")]
    [hand.add_card(card) for card in cards]
    print(hand.get_hand_type())  # Should print "four of a kind"

"""Dictionary exercises."""


def get_hobbies(hobbies_dict: dict, name: str) -> list:
    """
    Return the hobbies of a given person.

    :param hobbies_dict: dictionary with peoples' hobbies.
    :param name: name of person whose hobbies are to be returned.
    :return: List of hobbies of the person with given name or "name not in dictionary".
    """
    return hobbies_dict.get(name, "name not in dictionary")


def find_tallest(height_dict: dict) -> str:
    """
    Return the name of the tallest person in the given dictionary.

    :param height_dict: dictionary with peoples' names and heights.
    :return: Name of the tallest person in the given dictionary.
    """
    tallest_name = max(height_dict, key=height_dict.get, default=None)
    return tallest_name


def remove_sixes(six_dict: dict) -> dict:
    """
    Return a dictionary where all keys whose values are divisible by six are removed.

    :param six_dict: dictionary to be modified.
    :return: Dictionary without values that are divisible by six.
    """
    return {key: value for key, value in six_dict.items() if value % 6 != 0}


def exchange_keys_and_values(exchange_dict: dict) -> dict:
    """
    Return a dictionary where keys and values have been exchanged.

    :param exchange_dict: dictionary to be modified.
    :return: Dictionary where values and keys have been exchanged.
    """
    return {value: key for key, value in exchange_dict.items()}


def count_symbol_appearances(stringy: str) -> dict:
    """
    Return a dictionary where the key is the symbol and the value is the count this symbol is present in the string.

    :param stringy: string to be processed.
    :return: Dictionary with symbol counts.
    """
    symbol_counts = {}
    for symbol in stringy:
        symbol_counts[symbol] = symbol_counts.get(symbol, 0) + 1
    return symbol_counts


def organise_by_first_symbol(strings: list) -> dict:
    """
    Return a dictionary where the key is a symbol and the value is a list of words starting with this symbol.

    :param strings: list of strings.
    :return: Dictionary with starting symbol and corresponding words in order of appearance.
    """
    organized_dict = {}
    for word in strings:
        first_symbol = word[0]
        organized_dict.setdefault(first_symbol, []).append(word)
    return organized_dict
